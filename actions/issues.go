package actions

import (
	"strings"

	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/ossn/fixme_backend/models"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Issue)
// DB Table: Plural (issues)
// Resource: Plural (Issues)
// Path: Plural (/issues)
// View Template Folder: Plural (/templates/issues/)

// IssuesResource is the resource for the Issue model
type IssuesResource struct {
	buffalo.Resource
}

func filters(query, param *string, paramName string) {
	initialWhereClause := *query
	if *param != "" {
		*param = strings.TrimSuffix(strings.TrimPrefix(strings.ToLower(*param), "[\""), "\"]")
		splitParam := strings.Split(*param, ",")
		for i := range splitParam {
			splitParam[i] = strings.Trim(splitParam[i], "\"")

			switch splitParam[i] {
			case "", "undefined":
				splitParam = append(splitParam[:i], splitParam[i+1:]...)
			case "*":
				*query = initialWhereClause
				return
			}
		}
		if len(splitParam) > 0 {
			*query += " and " + paramName + " in ("
			for i, t := range splitParam {
				if i > 0 {
					*query += ","
				}
				*query += "'" + strings.TrimSpace(t) + "'"
			}
			*query += ")"
		}
	}
}

// List gets all Issues. This function is mapped to the path
// GET /issues
func (v IssuesResource) ListOpen(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	issues := &models.Issues{}
	params := c.Params()
	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(params).Eager()

	whereClause := "closed = false"

	for _, filter := range []string{"language", "experience_needed", "type", "project_id"} {
		param := params.Get(filter)
		if param != "" {
			filters(&whereClause, &param, filter)
		}
	}
	// Retrieve all Issues from the DB
	if err := q.Where(whereClause).All(issues); err != nil {
		return errors.WithStack(err)
	}
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.Auto(c, issues))
}

// List gets all Issues. This function is mapped to the path
// GET issues without closed
func (v IssuesResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	issues := &models.Issues{}
	params := c.Params()
	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(params).Eager()

	// Retrieve all Issues from the DB
	if err := q.All(issues); err != nil {
		return errors.WithStack(err)
	}
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.Auto(c, issues))
}


// Show gets the data for one Issue. This function is mapped to
// the path GET /issues/{issue_id}
func (v IssuesResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Issue
	issue := &models.Issue{}

	// To find the Issue the parameter issue_id is used.
	if err := tx.Find(issue, c.Param("issue_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, issue))
}

// List gets all Issues. This function is mapped to the path
// GET /issues-count
func (v IssuesResource) Count(c buffalo.Context) error {
	// Get the DB connection from the context
	q, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	issues := &models.Issues{}
	params := c.Params()
	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".

	whereClause := "closed = false"

	for _, filter := range []string{"language", "experience_needed", "type", "project_id"} {
		param := params.Get(filter)
		if param != "" {
			filters(&whereClause, &param, filter)
		}
	}
	count, err := q.Where(whereClause).Count(issues)
	// Count Issues from the DB
	if err != nil {
		return errors.WithStack(err)
	}

	return c.Render(200, r.Auto(c, count))
}

// New renders the form for creating a new Issue.
// This function is mapped to the path GET /issues/new
// func (v IssuesResource) New(c buffalo.Context) error {
// 	return c.Render(200, r.Auto(c, &models.Issue{}))
// }

// Create adds a Issue to the DB. This function is mapped to the
// path POST /issues
// func (v IssuesResource) Create(c buffalo.Context) error {
// 	// Allocate an empty Issue
// 	issue := &models.Issue{}

// 	// Bind issue to the html form elements
// 	if err := c.Bind(issue); err != nil {
// 		return errors.WithStack(err)
// 	}

// 	// Get the DB connection from the context
// 	tx, ok := c.Value("tx").(*pop.Connection)
// 	if !ok {
// 		return errors.WithStack(errors.New("no transaction found"))
// 	}

// 	// Validate the data from the html form
// 	verrs, err := tx.ValidateAndCreate(issue)
// 	if err != nil {
// 		return errors.WithStack(err)
// 	}

// 	if verrs.HasAny() {
// 		// Make the errors available inside the html template
// 		c.Set("errors", verrs)

// 		// Render again the new.html template that the user can
// 		// correct the input.
// 		return c.Render(422, r.Auto(c, issue))
// 	}

// 	// If there are no errors set a success message
// 	c.Flash().Add("success", "Issue was created successfully")

// 	// and redirect to the issues index page
// 	return c.Render(201, r.Auto(c, issue))
// }

// Edit renders a edit form for a Issue. This function is
// mapped to the path GET /issues/{issue_id}/edit
// func (v IssuesResource) Edit(c buffalo.Context) error {
// 	// Get the DB connection from the context
// 	tx, ok := c.Value("tx").(*pop.Connection)
// 	if !ok {
// 		return errors.WithStack(errors.New("no transaction found"))
// 	}

// 	// Allocate an empty Issue
// 	issue := &models.Issue{}

// 	if err := tx.Find(issue, c.Param("issue_id")); err != nil {
// 		return c.Error(404, err)
// 	}

// 	return c.Render(200, r.Auto(c, issue))
// }

// // Update changes a Issue in the DB. This function is mapped to
// // the path PUT /issues/{issue_id}
// func (v IssuesResource) Update(c buffalo.Context) error {
// 	// Get the DB connection from the context
// 	tx, ok := c.Value("tx").(*pop.Connection)
// 	if !ok {
// 		return errors.WithStack(errors.New("no transaction found"))
// 	}

// 	// Allocate an empty Issue
// 	issue := &models.Issue{}

// 	if err := tx.Find(issue, c.Param("issue_id")); err != nil {
// 		return c.Error(404, err)
// 	}

// 	// Bind Issue to the html form elements
// 	if err := c.Bind(issue); err != nil {
// 		return errors.WithStack(err)
// 	}

// 	verrs, err := tx.ValidateAndUpdate(issue)
// 	if err != nil {
// 		return errors.WithStack(err)
// 	}

// 	if verrs.HasAny() {
// 		// Make the errors available inside the html template
// 		c.Set("errors", verrs)

// 		// Render again the edit.html template that the user can
// 		// correct the input.
// 		return c.Render(422, r.Auto(c, issue))
// 	}

// 	// If there are no errors set a success message
// 	c.Flash().Add("success", "Issue was updated successfully")

// 	// and redirect to the issues index page
// 	return c.Render(200, r.Auto(c, issue))
// }

// // Destroy deletes a Issue from the DB. This function is mapped
// // to the path DELETE /issues/{issue_id}
// func (v IssuesResource) Destroy(c buffalo.Context) error {
// 	// Get the DB connection from the context
// 	tx, ok := c.Value("tx").(*pop.Connection)
// 	if !ok {
// 		return errors.WithStack(errors.New("no transaction found"))
// 	}

// 	// Allocate an empty Issue
// 	issue := &models.Issue{}

// 	// To find the Issue the parameter issue_id is used.
// 	if err := tx.Find(issue, c.Param("issue_id")); err != nil {
// 		return c.Error(404, err)
// 	}

// 	if err := tx.Destroy(issue); err != nil {
// 		return errors.WithStack(err)
// 	}

// 	// If there are no errors set a flash message
// 	c.Flash().Add("success", "Issue was destroyed successfully")

// 	// Redirect to the issues index page
// 	return c.Render(200, r.Auto(c, issue))
// }
